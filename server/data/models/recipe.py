# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from server import util
from server.data.models.base_model_ import Model


class Recipe(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str = None, title: str = None, directions: List[str] = None,
                 ingredients: List[str] = None):  # noqa: E501
        """Recipe - a model defined in Swagger

        :param id: The id of this Recipe.  # noqa: E501
        :type id: str
        :param title: The title of this Recipe.  # noqa: E501
        :type title: str
        :param directions: The directions of this Recipe.  # noqa: E501
        :type directions: List[str]
        :param ingredients: The ingredients of this Recipe.  # noqa: E501
        :type ingredients: List[str]
        """
        self.swagger_types = {
            'id': str,
            'title': str,
            'directions': List[str],
            'ingredients': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'directions': 'directions',
            'ingredients': 'ingredients',
        }
        self._id = id
        self._title = title
        self._directions = directions
        self._ingredients = ingredients

    @classmethod
    def from_dict(cls, dikt) -> 'Recipe':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Recipe of this Recipe.  # noqa: E501
        :rtype: Recipe
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Recipe.


        :return: The id of this Recipe.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Recipe.


        :param id: The id of this Recipe.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Recipe.


        :return: The title of this Recipe.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Recipe.


        :param title: The title of this Recipe.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def directions(self) -> List[str]:
        """Gets the directions of this Recipe.


        :return: The directions of this Recipe.
        :rtype: List[str]
        """
        return self._directions

    @directions.setter
    def directions(self, directions: List[str]):
        """Sets the directions of this Recipe.


        :param directions: The directions of this Recipe.
        :type directions: List[str]
        """
        if directions is None:
            raise ValueError("Invalid value for `directions`, must not be `None`")  # noqa: E501

        self._directions = directions

    @property
    def ingredients(self) -> List[str]:
        """Gets the ingredients of this Recipe.


        :return: The ingredients of this Recipe.
        :rtype: List[str]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients: List[str]):
        """Sets the ingredients of this Recipe.


        :param ingredients: The ingredients of this Recipe.
        :type ingredients: List[str]
        """
        if ingredients is None:
            raise ValueError("Invalid value for `ingredients`, must not be `None`")  # noqa: E501

        self._ingredients = ingredients
